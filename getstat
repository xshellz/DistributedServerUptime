#xShellz API & PHP callbacks written by StephenS <-> admin@xshellz.com
#getstat bash script written by bolt <-> bolt@dhampir.no

#!/usr/bin/env bash
_scriptname="getstat"
set -u
set -e

ftphost="edithost.com"
ftpuser="edituser"
ftppass="editpass"

ok="statusok.gif"
warn="statuswarning.gif"
fail="statusfailed.gif"

srvhost="/home/xinfo/srvstat/srvhost"
srvip="/home/xinfo/srvstat/srvip"
srvstat="/home/xinfo/srvstat/srvstat"
srvphp="/home/xinfo/srvstat/index.php"

source /cathedral/src/lib/shellfunc

function cleanup
{
        set +e
        sf_rm_process
}
trap cleanup EXIT

sf_mkfile -qo newstat
function check
{
        local target=$1 port=$2
        echo -n "CHECK: ${target}:${port}..."
        if output=$(/cathedral/userbin/ussh -n -o BatchMode=yes -o ConnectTimeout=20 "bolt@$target" -p $port "uptime" 2>/dev/null); then
                read -r output <<<"$output"
                echo "$output" >>"$newstat"
                output=${output#*up }
                output=${output%user*}
                output=${output%,*}
                echo " OK"
                return 0
        else
                echo " FAIL"
                return 1
        fi
}

sf_mkfile -qo newphp
sf_mkfile -qo newip
function readtab
{
        local varname=$1 linename=$2
        local line=${!linename}
        local var="${line%%$'\t'*}"
        printf -v "$varname" "%s" "$var"
        if [[ "$var" = "$line" ]]; then
                line=""
        else
                read -r line <<<"${line#*$'\t'}"
        fi
        printf -v "$linename" "%s" "$line"
}

first=true
while read -r srv; do
        readtab name srv
        readtab host srv
        readtab port srv
        ip=$(sf_lookup "$host" | grep -v ":" | head -n 1)
        if [[ -n "$ip" ]]; then
                while read -r line; do
                        if [[ "${line%%$'\t'*}" = "$host" ]]; then
                                ip="${line##*$'\t'}"
                                break
                        fi
                done <"$srvip"
        fi
if [[ -n "$ip" ]]; then
                echo -e "$host\t$ip" >>"$newip"
        fi
        if $first; then
                first=false
        else
                echo -n ' <img src="/bolt/spacer.gif"> | ' >>"$newphp"
        fi
        if check "$host" "${port:-22}"; then
                echo -en "$name: $host ($output) <img src=\"/bolt/${ok}\">" >>"$newphp"
        elif [[ -n "$ip" ]] && check "$ip" "${port:-22}"; then
                echo -en "$name: $host ($output) <img src=\"/bolt/${warn}\">" >>"$newphp"
        else
                echo -en "$name: $host <img src=\"/bolt/${fail}\">" >>"$newphp"
                echo "Offline" >>"$newstat"
        fi
done <"$srvhost"

cat "$newip" >"$srvip"
cat "$newstat" >"$srvstat"
cat "$newphp" >"$srvphp"

echo "UPLOAD: $ftphost"
/cathedral/userbin/shellfunc timeout 60 lftp -e "debug; set ftp:ssl-allow no; set ssl:verify-certificate no; put $srvphp; bye" -u "$ftpuser,$ftppass" "$ftphost" || echo "Upload failed"x

